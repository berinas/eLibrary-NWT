package etf.unsa.ba.BookDetails;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.YamlPropertiesFactoryBean;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Primary;
import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;
import org.springframework.core.io.ClassPathResource;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;

import etf.unsa.ba.BookDetails.Entities.Author;
import etf.unsa.ba.BookDetails.Entities.Book;
import etf.unsa.ba.BookDetails.Entities.Category;
import etf.unsa.ba.BookDetails.Entities.Category.BookCategory;
import etf.unsa.ba.BookDetails.Entities.Section;
import etf.unsa.ba.BookDetails.Entities.Section.SectionType;
import etf.unsa.ba.BookDetails.Repositories.AuthorRepository;
import etf.unsa.ba.BookDetails.Repositories.BookRepository;
import etf.unsa.ba.BookDetails.Repositories.CategoryRepository;
import etf.unsa.ba.BookDetails.Repositories.SectionRepository;

@SpringBootApplication
@EnableAutoConfiguration
@EnableJpaRepositories
@EntityScan
@EnableDiscoveryClient
public class BookDetailsApplication implements CommandLineRunner {

	@Autowired
	BookRepository bookRepository;
	@Autowired
	AuthorRepository authorRepository;
	@Autowired
	SectionRepository sectionRepository;
	@Autowired
	CategoryRepository categoryRepository;
	
	public static void main(String[] args) {
		SpringApplication.run(BookDetailsApplication.class, args);
	}
	
	@Override
	public void run(String... arg0) throws Exception {
	
		Category science = new Category(BookCategory.SCIENCE);
		Category history = new Category(BookCategory.HISTORY);
		Category medicine = new Category(BookCategory.MEDICINE);
		Category fantasy = new Category(BookCategory.FANTASY);
		Category art = new Category(BookCategory.ART);
		Category romance = new Category(BookCategory.ROMANCE);
		Category music = new Category(BookCategory.MUSIC);
		Category children = new Category(BookCategory.CHILDREN);
		Category religion = new Category(BookCategory.RELIGION);
		
		categoryRepository.save(science);
		categoryRepository.save(history);
		categoryRepository.save(medicine);
		categoryRepository.save(fantasy);
		categoryRepository.save(art);
		categoryRepository.save(romance);
		categoryRepository.save(music);
		categoryRepository.save(children);
		categoryRepository.save(religion);
		
		
		Section s1 = new Section(SectionType.BOOK);
		s1.setCategory(science);  
		Section s2 = new Section(SectionType.BOOK);
		s2.setCategory(history); 
		Section s3 = new Section(SectionType.BOOK);
		s3.setCategory(medicine); 
		
		//Section s2 = new Section(SectionType.MAGAZINE);
		//Section s3 = new Section(SectionType.ARTICLE);
		sectionRepository.save(s1);
		sectionRepository.save(s2);
		sectionRepository.save(s3);
		
		Book book = new Book("History Book", "desc", "eng", new Date());
		book.setSection(s2);
		bookRepository.save(book);
		/*Author author1 = new Author("Author1", "Author11");
		Author author2 = new Author("Author2", "Author22");
		
		List<Author> authors = new ArrayList<Author>();
		List<Book> books = new ArrayList<Book>();
		
	
		
		authors.add(author1);
		authors.add(author2);
		books.add(book);
		book.setAuthors(authors);
		book.setSection(s1);
		author1.setBooks(books);
		author2.setBooks(books);
		
		bookRepository.save(book);
		authorRepository.save(author1);
		authorRepository.save(author2); */
		
	}

	
	@Bean
    @Primary
    public static PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer() {
        PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer = new PropertySourcesPlaceholderConfigurer();
        YamlPropertiesFactoryBean yaml = new YamlPropertiesFactoryBean();
        yaml.setResources(new ClassPathResource("application.yml"));
        propertySourcesPlaceholderConfigurer.setProperties(yaml.getObject());
        return propertySourcesPlaceholderConfigurer;
    }
	

}
