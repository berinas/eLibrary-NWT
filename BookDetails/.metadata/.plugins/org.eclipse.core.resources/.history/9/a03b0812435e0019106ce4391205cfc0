package etf.unsa.ba.BookDetails.Services;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import etf.unsa.ba.BookDetails.Entities.Author;
import etf.unsa.ba.BookDetails.Entities.Book;
import etf.unsa.ba.BookDetails.Entities.BookContent;
import etf.unsa.ba.BookDetails.Exceptions.EntryNotFoundException;
import etf.unsa.ba.BookDetails.Repositories.AuthorRepository;
import etf.unsa.ba.BookDetails.Repositories.BookContentRepository;
import etf.unsa.ba.BookDetails.Repositories.BookRepository;
import javassist.NotFoundException;

@Service
public class BookService {

	@Autowired
	BookRepository bookRepository;
	@Autowired 
	AuthorRepository authorRepository;
	@Autowired
	BookContentRepository bookContentRepository;
	@Autowired
	GoogleDriveService googleDriveService;
	
	@Autowired
	public BookService(BookRepository bookRepository,
					   AuthorRepository authorRepository,
					   BookContentRepository bookContentRepository,
					   GoogleDriveService googleDriveService) {
		this.bookRepository = bookRepository;
		this.authorRepository = authorRepository;
		this.bookContentRepository = bookContentRepository; 
		this.googleDriveService = googleDriveService;
	}
	
	
	public List<Book> findAll(){
		return bookRepository.findAll();
	}
	
	
	public Book findBookById(Long id) {
		
		Optional<Book> optionalBook = bookRepository.findById(id);
		
		if (!optionalBook.isPresent()) 
			throw new EntryNotFoundException("Book with given id not found");
	
		return optionalBook.get();
	}
	
	public List<Book> findBookByTitle(String title) {
		
		List<Book> books = bookRepository.findByTitle(title);
		return books;
	}
	
	public List<Book> findBookBySection(String section){
		List<Book> books = bookRepository.findBySection(section);
		return books;
	}
	
	public List<Author> findBookAuthors(Long bookId){
		
		Optional<Book> optionalBook = bookRepository.findById(bookId);
		if (!optionalBook.isPresent()) 
			throw new EntryNotFoundException("Book with given id not found");
		
		return optionalBook.get().getAuthors();
		
	}
	
	public Book addBook(Book book) {
	
		File file = new File("C:\\Users\\PC\\Desktop\\h2.jpg");
		com.google.api.services.drive.model.File file2  = googleDriveService.upLoadFile(book.getId(), file.getAbsolutePath(),"image/jpg");
		/*try {
			System.err.println(file2.toPrettyString());
		} catch (IOException e) {
			e.printStackTrace();
		}*/
		Book saved = bookRepository.save(book);
		BookContent bookContent = bookContentRepository.save(new BookContent(saved));
		//saved.setBookContent(bookContent);
		return saved;
	}
	
	
	
}
