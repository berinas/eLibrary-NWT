package etf.unsa.ba.Books.Controllers;

import java.awt.PageAttributes.MediaType;
import java.net.URI;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.ServiceInstance;
import org.springframework.cloud.client.discovery.DiscoveryClient;
import org.springframework.cloud.client.loadbalancer.LoadBalanced;
import org.springframework.context.annotation.Bean;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.netflix.ribbon.proxy.annotation.Http.HttpMethod;

import etf.unsa.ba.Books.Entities.Book;
import etf.unsa.ba.Books.Entities.User;
import etf.unsa.ba.Books.Repositories.BookRepository;
import etf.unsa.ba.Books.Repositories.UserRepository;

@RestController
public class UserController {

	@Autowired
	private UserRepository userRepository;
	@Autowired
	private BookRepository bookRepository;
	
	
	@Autowired
	private DiscoveryClient discoveryClient;
	@Autowired
    RestTemplate restTemplate;
	

    @Bean
    @LoadBalanced
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }
	
	
	 @RequestMapping("/service-instances/{applicationName}")
	    public List<ServiceInstance> serviceInstancesByApplicationName(
	            @PathVariable String applicationName) {
	        return this.discoveryClient.getInstances(applicationName);
	    }
	
	 @RequestMapping(value = "/proba", method = RequestMethod.GET)
	 public String proba(){
		 
		  URI uri = new URI("http://localhost:8082/proba");
		     
		  	RestTemplate restTemplate = new RestTemplate();
		     
		    HttpHeaders headers = new HttpHeaders();
		    headers.setAccept(Arrays.asList(MediaType.A));
		    HttpEntity<String> entity = new HttpEntity<String>("parameters", headers);
		    ResponseEntity<String> result = restTemplate.exchange(uri, HttpMethod.GET, entity, String.class);
	
		    
	 }
	 
	 
	 
	 
	 
	@GetMapping("/users/{userId}/wishlist")
	public List<Book> getWishList(@PathVariable Long userId){
		
		Optional<User> userOptional = userRepository.findById(userId);
		
		if (!userOptional.isPresent()) 
			//throw new UserNotFoundException("id:" + knjigaId);
			return null;
		
		return userOptional.get().getBooksWishList();
		
	}
	
	
	@PostMapping("/users/{userId}/wishlist/{bookId}")
	public void addBookToWishList(@PathVariable("userId") Long userId, @PathVariable("bookId") Long bookId){
		
		Optional<User> userOptional = userRepository.findById(userId);
		
		//if (!userOptional.isPresent()) 
			//throw new UserNotFoundException("id:" + knjigaId);
			//return null;
		
		User user = userOptional.get();
		
		Optional<Book> bookOptional = bookRepository.findById(bookId);
		Book book = bookOptional.get();
		
		book.getUsersWishList().add(user);
		
		user.getBooksWishList().add(book);
		
		bookRepository.save(book);
		
	}
	
	
	
}
